############### BS Blackjack Project #####################

import random as r
import art as a
from replit import clear

# Starts the game
def start_game():
  start = input("Do you want to play Blackjack? [y] or [n] : ").lower()
  return start == 'y'

#def play_again():
 # play = input("Do you want to play Blackjack? [y] or [n] : ").lower()
  #return play == 'y'

# Deals card, random with replacement
def deal():
    #return r.choice(cards)
  return cards.pop()

# Calculates current score and adjusts aces
def calc_score(hand):
  """score = sum(hand)
  num_aces = hand.count(11)
  while score > 21 and num_aces:
      score -= 10
      num_aces -= 1
  return score"""
  value = 0
  num_aces = 0
  for card in hand:
    rank = card[0]
    if rank == "A":
      num_aces += 1
    elif rank in ("J", "Q", "K"):
      value += 10
    else:
      value += int(rank)
  #aces are worth 11 only if it doesnt bust, 1 otherwise
  value += num_aces
  for i in range(num_aces):  
    if value + 10 <= 21:
      value += 10
  return value

#generate graphics for cards
def card_graphics(card):
  rows = ["", "", "", ""]

  for rank, suit in card:
      rows[0] += " ___ "
      if card == "BACKSIDE":
          rows[1] += "|## |"
          rows[2] += "|###|"
          rows[3] += "|_##|"
      else:
          rows[1] += f"|{rank}  |"
          rows[2] += f"| {suit} |"
          rows[3] += f"|__{rank}|"
  # print rows
  for row in rows:
      print(row)

      
      

# Displays the hands
def display_hands(player_hand, dealer_hand, player_score, dealer_score=None, reveal_dealer=False):
    if reveal_dealer:
      print(f"\nDealer's Score: {dealer_score}\n")
      card_graphics(dealer_hand)
    else:
      print("Dealer:")
      card_graphics(([BACKSIDE] + dealer_hand[1:]))
    print(f"\nPlayer's Score: {player_score}\n")  
    card_graphics(player_hand)
# Handles the player's turn
def players_turn(player_hand, dealer_hand):
    while True:
        player_score = calc_score(player_hand)
        display_hands(player_hand, dealer_hand, player_score)

        if player_score > 21:  # Check if busted
            print('Busted, you lose.')
            return False, player_score

        hit_stay = input("Would you like to [h]it or [s]tay?: ").lower()  # Prompt to hit or stay

        if hit_stay == 'h':  # If hit, add card
            player_hand.append(deal())
        else:
            return True, player_score

# Handles the dealer's turn
def dealers_turn(dealer_hand):
    while calc_score(dealer_hand) < 17:
        dealer_hand.append(deal())
    return dealer_hand

#cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]

#setup suits
# Set up the constants:
HEARTS   = chr(9829) # Character 9829 is '♥'.
DIAMONDS = chr(9830) # Character 9830 is '♦'.
SPADES   = chr(9824) # Character 9824 is '♠'.
CLUBS    = chr(9827) # Character 9827 is '♣'.
BACKSIDE = ("*","*")
#populate a deck of cards
def card_deck():
  cards=[]
  for suit in (HEARTS, DIAMONDS, SPADES, CLUBS):
    for number in range(2,11):
      cards.append((str(number), suit))
    for face in ("J", "Q", "K", "A"):
      cards.append((face, suit))
  r.shuffle(cards)
  return cards
  

print(a.logo)

# Main game loop
while start_game():
    clear()
    #shuffle cards  
    cards = card_deck()
      # Assuming this clears the console for a new game

    # Deal cards
    player_hand = [deal(), deal()]
    dealer_hand = [deal(), deal()]

    # Calculate initial scores
    player_score = calc_score(player_hand)
    dealer_score = calc_score(dealer_hand)

    # Show initial hands, obfuscate dealer's first card
    #display_hands(player_hand, dealer_hand, player_score)

    # Player's turn
    player_continue, player_score = players_turn(player_hand, dealer_hand)

    if player_continue and player_score <= 21:
        # Dealer's turn
        dealer_hand = dealers_turn(dealer_hand)
        dealer_score = calc_score(dealer_hand)

        # Reveal dealer's hand and determine the winner
        display_hands(player_hand, dealer_hand, player_score, dealer_score, reveal_dealer=True)
        if dealer_score > 21:
            print("Dealer busts, you win!")
        elif player_score > dealer_score:
            print("You win!")
        elif player_score < dealer_score:
            print("You lose.")
        else:
            print("It's a tie!")
    else:
        display_hands(player_hand, dealer_hand, player_score, dealer_score, reveal_dealer=True)
        print("You busted, dealer wins.")
 
  
  



